import pandas as pd
file_branch = pd.read_csv(r'C:\Users\Krishna S R\Desktop\Branch.csv',index_col=False,delimiter=',',header=None)  
file_branch.head()
file_Employee = pd.read_csv(r'C:\Users\Krishna S R\Desktop\Employee.csv',index_col=False,delimiter=',',header=None)
file_Employee.head()
file_customer = pd.read_csv(r'C:\Users\Krishna S R\Desktop\Customer.csv',index_col=False,delimiter=',',header=None)
file_customer.head()
file_Loan = pd.read_csv(r'C:\Users\Krishna S R\Desktop\Loan.csv',index_col=False,delimiter=',',header=None)
file_Loan.head()
file_Payment = pd.read_csv(r'C:\Users\Krishna S R\Desktop\Payment.csv',index_col=False,delimiter=',',header=None)
file_Payment.head()
file_Borrower = pd.read_csv(r'C:\Users\Krishna S R\Desktop\Borrower.csv',index_col=False,delimiter=',',header=None)
file_Borrower.head()
file_Depname = pd.read_csv(r'C:\Users\Krishna S R\Desktop\Depname.csv',index_col=False,delimiter=',',header=None)
file_Depname.head()
file_Account = pd.read_csv(r'C:\Users\Krishna S R\Desktop\Account.csv',index_col=False,delimiter=',',header=None)
file_Account.head()
file_Savings_acc = pd.read_csv(r'C:\Users\Krishna S R\Desktop\Savings_acc.csv',index_col=False,delimiter=',',header=None)
file_Savings_acc.head()
file_Checking_acc = pd.read_csv(r'C:\Users\Krishna S R\Desktop\Checking_acc.csv',index_col=False,delimiter=',',header=None)
file_Checking_acc.head()
file_Depositor = pd.read_csv(r'C:\Users\Krishna S R\Desktop\Depositor.csv',index_col=False,delimiter=',',header=None)
file_Depositor.head()
import mysql.connector as mesql
from mysql.connector import Error
try:
    connet=mesql.connect(host="acadmysqldb001p.uta.edu",user="kxs0344",password="Scarenage@0512")
    if connet.is_connected():
        cursor=connet.cursor()
        print("Database is connected")
        cursor.execute("USE kxs0344;")
        cursor.execute("DROP TABLE IF EXISTS Depositor;")
        cursor.execute("DROP TABLE IF EXISTS Checking_acc;")
        cursor.execute("DROP TABLE IF EXISTS Savings_acc;")
        cursor.execute("DROP TABLE IF EXISTS Account;")
        cursor.execute("DROP TABLE IF EXISTS Depname;")
        cursor.execute("DROP TABLE IF EXISTS Borrower;")
        cursor.execute("DROP TABLE IF EXISTS Payment;")
        cursor.execute("DROP TABLE IF EXISTS Loan;")
        cursor.execute("DROP TABLE IF EXISTS Customer;")
        cursor.execute("DROP TABLE IF EXISTS Employee;")
        cursor.execute("DROP TABLE IF EXISTS Branch;")
        print("Creating table Branch...")
        cursor.execute("CREATE TABLE Branch (Branch_name VARCHAR(20) NOT NULL, Branch_city VARCHAR(20),  Assests VARCHAR(20), PRIMARY KEY (Branch_name)  );")
        print("Table Branch created..")
        for i, row in file_branch.iterrows():
            cursor.execute(f"INSERT INTO Branch VALUES ({row[0]},{row[1]},{row[2]});")
            print("value for Branch inserted")
            connet.commit()
        print("Creating table Employee...")
        cursor.execute("CREATE TABLE Employee (Emp_ssn INT NOT NULL, Emp_name VARCHAR(20), Emp_telephone INT, Startdate DATE, Emp_manag_ssn INT, PRIMARY KEY (Emp_ssn));")
        
        print("Table Employee created..")
        for i, row in file_Employee.iterrows():
            cursor.execute(f"INSERT INTO Employee VALUES ({row[0]},{row[1]},{row[2]},{row[3]},{row[4]});")
            print("value for Employee inserted")
            connet.commit()
        cursor.execute("ALTER TABLE Employee ADD FOREIGN KEY (Emp_manag_ssn) REFERENCES Employee (Emp_ssn) ON DELETE CASCADE ON UPDATE CASCADE;")
        print("Creating table Customer...")
        cursor.execute("CREATE TABLE Customer ( Cust_ssn INT NOT NULL, Cust_name VARCHAR(20), Cust_street VARCHAR(30), Cust_city VARCHAR(20), Type VARCHAR(15), Emp_ssn INT, PRIMARY KEY (Cust_ssn), FOREIGN KEY (Emp_ssn) REFERENCES Employee (Emp_ssn) ON DELETE CASCADE ON UPDATE CASCADE);")
        print("Table Customer created..")
        for i, row in file_customer.iterrows():
            cursor.execute(f"INSERT INTO Customer VALUES ({row[0]},{row[1]},{row[2]},{row[3]},{row[4]},{row[5]});")
            print("value for Customer inserted")
            connet.commit()
        print("Creating table Loan...")
        cursor.execute("CREATE TABLE Loan( Loan_no INT NOT NULL, Loan_amount DECIMAL(10,2), Branch_name VARCHAR(20), PRIMARY KEY (Loan_no), FOREIGN KEY (Branch_name) REFERENCES Branch (Branch_name) ON DELETE CASCADE ON UPDATE CASCADE);")
        print("Table Loan created..")
        for i, row in file_Loan.iterrows():
            cursor.execute(f"INSERT INTO Loan VALUES ({row[0]},{row[1]},{row[2]});")
            print("value for Loan inserted")
            connet.commit()
        print("Creating table Payment...")
        cursor.execute("CREATE TABLE Payment ( Loan_no INT NOT NULL, Pay_no INT NOT NULL, Pay_date DATE, Pay_amount DECIMAL(10,2), PRIMARY KEY(Loan_no,Pay_no), FOREIGN KEY (Loan_no) REFERENCES Loan (Loan_no) ON DELETE CASCADE ON UPDATE CASCADE);")
        print("Table Payment created..")
        for i, row in file_Payment.iterrows():
            cursor.execute(f"INSERT INTO Payment VALUES ({row[0]},{row[1]},{row[2]},{row[3]});")
            print("value for Payment inserted")
            connet.commit()
        print("Creating table Borrower...")
        cursor.execute("CREATE TABLE Borrower ( Loan_no INT NOT NULL, Cust_ssn INT NOT NULL, PRIMARY KEY(Loan_no,Cust_ssn), FOREIGN KEY (Loan_no) REFERENCES Loan (Loan_no) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (Cust_ssn) REFERENCES Customer (Cust_ssn) ON DELETE CASCADE ON UPDATE CASCADE);")
        print("Table Borrower created..")
        for i, row in file_Borrower.iterrows():
            cursor.execute(f"INSERT INTO Borrower VALUES ({row[0]},{row[1]});")
            print("value for Borrower inserted")
            connet.commit()
        print("Creating table Depname...")
        cursor.execute("CREATE TABLE Depname ( Emp_ssn INT NOT NULL, Emp_depname VARCHAR(30) NOT NULL, PRIMARY KEY (Emp_ssn, Emp_depname), FOREIGN KEY (Emp_ssn) REFERENCES Employee(Emp_ssn) ON DELETE CASCADE ON UPDATE CASCADE);")
        for i, row in file_Depname.iterrows():
            cursor.execute(f"INSERT INTO Depname VALUES ({row[0]},{row[1]});")
            print("value for Depname inserted")
            connet.commit()
        print("Creating table Account...")
        cursor.execute("CREATE TABLE Account ( Account_no INT NOT NULL, Balance DECIMAL(10,2), Deposit DECIMAL (10,2), Withdrawal DECIMAL(10,2), PRIMARY KEY(Account_no));")
        for i, row in file_Account.iterrows():
            cursor.execute(f"INSERT INTO Account VALUES ({row[0]},{row[1]},{row[2]},{row[3]});")
            print("value for Account inserted")
            connet.commit()
        print("Creating table Savings_acc...")
        cursor.execute("CREATE TABLE Savings_acc ( Account_no1 INT NOT NULL, Interest_rate INT, PRIMARY KEY (Account_no1), FOREIGN KEY(Account_no1) REFERENCES Account(Account_no) ON DELETE CASCADE ON UPDATE CASCADE);")
        for i, row in file_Savings_acc.iterrows():
            cursor.execute(f"INSERT INTO Savings_acc VALUES ({row[0]},{row[1]});")
            print("value for Savings_acc inserted")
            connet.commit()
        print("Creating table Checking_acc...")
        cursor.execute("CREATE TABLE Checking_acc (Account_no2 INT NOT NULL, Overdrafts VARCHAR(20), PRIMARY KEY (Account_no2), FOREIGN KEY(Account_no2) REFERENCES Account(Account_no) ON DELETE CASCADE ON UPDATE CASCADE);")
        for i, row in file_Checking_acc.iterrows():
            cursor.execute(f"INSERT INTO Checking_acc VALUES ({row[0]},{row[1]});")
            print("value for Checking_acc inserted")
            connet.commit()
        print("Creating table Depositor...")
        cursor.execute("CREATE TABLE Depositor (Account_no INT NOT NULL, Cust_ssn INT NOT NULL, Date_accessed DATE, PRIMARY KEY (Account_no, Cust_ssn), FOREIGN KEY (Account_no) REFERENCES Account(Account_no) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (Cust_ssn) REFERENCES Customer (Cust_ssn) ON DELETE CASCADE ON UPDATE CASCADE);")
        for i, row in file_Depositor.iterrows():
            cursor.execute(f"INSERT INTO Depositor VALUES ({row[0]},{row[1]},{row[2]});")
            print("value for Depositor inserted")
            connet.commit()

except Error as err:
    print("Error while connecting to mysql",err)
